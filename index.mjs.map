{"version":3,"file":"index.mjs","sources":["../lib/async.js","../lib/sync.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isString } from '@stdlib/assert-is-string';\nimport isObject from '@stdlib/assert-is-plain-object';\nimport isFunction from '@stdlib/assert-is-function';\nimport readFile from '@stdlib/fs-read-file';\nimport removeBOM from '@stdlib/string-remove-utf8-bom';\nimport parseNDJSON from '@stdlib/utils-parse-ndjson';\nimport instanceOf from '@stdlib/assert-instance-of';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Asynchronously reads a file as newline-delimited JSON.\n*\n* @param {(string|Buffer|integer)} file - file path or file descriptor\n* @param {(Options|string)} [options] - options\n* @param {(string|null)} [options.encoding] - file encoding\n* @param {string} [options.flag] - file status flag\n* @param {Function} [options.reviver] - JSON reviver\n* @param {Callback} clbk - callback\n* @throws {TypeError} options argument must be either a string or an object\n* @throws {TypeError} callback argument must be a function\n*\n* @example\n* var resolve = require( 'path' ).resolve;\n*\n* readNDJSON( resolve( __dirname, '..', 'examples', 'fixtures', 'file.ndjson' ), onNDJSON );\n*\n* function onNDJSON( error, data ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     console.dir( data );\n* }\n*/\nfunction readNDJSON( file, options, clbk ) {\n\tvar opts;\n\tvar done;\n\tif ( arguments.length < 3 ) {\n\t\topts = {};\n\t\tdone = options;\n\t} else {\n\t\tif ( isString( options ) ) {\n\t\t\topts = {\n\t\t\t\t'encoding': options\n\t\t\t};\n\t\t} else {\n\t\t\tif ( !isObject( options ) ) {\n\t\t\t\tthrow new TypeError( format( 'null3t', options ) );\n\t\t\t}\n\t\t\topts = options;\n\t\t}\n\t\tdone = clbk;\n\t}\n\tif ( !isFunction( done ) ) {\n\t\tthrow new TypeError( format( 'null2b', done ) );\n\t}\n\treadFile( file, opts, onRead );\n\n\t/**\n\t* Callback invoked upon reading a file.\n\t*\n\t* @private\n\t* @param {(Error|null)} error - error object\n\t* @param {(Buffer|string)} file - file contents\n\t* @returns {void}\n\t*/\n\tfunction onRead( error, file ) {\n\t\tif ( error ) {\n\t\t\treturn done( error );\n\t\t}\n\t\tfile = file.toString();\n\t\tif ( opts.encoding === 'utf8' ) {\n\t\t\tfile = removeBOM( file );\n\t\t}\n\t\tif ( opts.reviver ) {\n\t\t\tfile = parseNDJSON( file, opts.reviver );\n\t\t} else {\n\t\t\tfile = parseNDJSON( file );\n\t\t}\n\t\tif ( instanceOf( file, Error ) ) {\n\t\t\treturn done( file );\n\t\t}\n\t\tdone( null, file );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default readNDJSON;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isString } from '@stdlib/assert-is-string';\nimport isObject from '@stdlib/assert-is-plain-object';\nimport { sync as readFile } from '@stdlib/fs-read-file';\nimport removeBOM from '@stdlib/string-remove-utf8-bom';\nimport parseNDJSON from '@stdlib/utils-parse-ndjson';\nimport instanceOf from '@stdlib/assert-instance-of';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Synchronously reads a file as newline-delimited JSON.\n*\n* @param {(string|Buffer|integer)} file - file path or file descriptor\n* @param {(Options|string)} [options] - options\n* @param {(string|null)} [options.encoding] - file encoding\n* @param {string} [options.flag] - file status flag\n* @param {Function} [options.reviver] - JSON reviver\n* @throws {TypeError} options argument must be either a string or an object\n* @returns {(Array|Error)} array of results or an error\n*\n* @example\n* var resolve = require( 'path' ).resolve;\n* import instanceOf from '@stdlib/assert-instance-of';\n*\n* var out = readNDJSONSync( resolve( __dirname, '..', 'examples', 'fixtures', 'file.ndjson' ) );\n* if ( instanceOf( out, Error ) ) {\n*     throw out;\n* }\n* console.dir( out );\n*/\nfunction readNDJSONSync( file, options ) {\n\tvar opts;\n\tvar f;\n\tif ( arguments.length > 1 ) {\n\t\tif ( isString( options ) ) {\n\t\t\topts = {\n\t\t\t\t'encoding': options\n\t\t\t};\n\t\t} else {\n\t\t\tif ( !isObject( options ) ) {\n\t\t\t\tthrow new TypeError( format( 'null3t', options ) );\n\t\t\t}\n\t\t\topts = options;\n\t\t}\n\t} else {\n\t\topts = {};\n\t}\n\tf = readFile( file, opts );\n\tif ( instanceOf( f, Error ) ) {\n\t\treturn f;\n\t}\n\tf = f.toString();\n\tif ( opts.encoding === 'utf8' ) {\n\t\tf = removeBOM( f );\n\t}\n\tif ( opts.reviver ) {\n\t\treturn parseNDJSON( f, opts.reviver );\n\t}\n\treturn parseNDJSON( f );\n}\n\n\n// EXPORTS //\n\nexport default readNDJSONSync;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Read a file as newline-delimited JSON.\n*\n* @module @stdlib/fs-read-ndjson\n*\n* @example\n* var resolve = require( 'path' ).resolve;\n* import readNDJSON from '@stdlib/fs-read-ndjson';\n*\n* function clbk( error, data ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     console.log( data );\n* }\n*\n* readNDJSON( resolve( __dirname, '..', 'examples', 'fixtures', 'file.ndjson' ), clbk );\n*\n* @example\n* var resolve = require( 'path' ).resolve;\n* import instanceOf from '@stdlib/assert-instance-of';\n* import readNDJSON from '@stdlib/fs-read-ndjson';\n*\n* var out = readNDJSON.sync( resolve( __dirname, '..', 'examples', 'fixtures', 'file.ndjson' ) );\n* if ( instanceOf( out, Error ) ) {\n*     throw out;\n* }\n* console.log( out );\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './async.js';\nimport sync from './sync.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'sync', sync );\n\n\n// EXPORTS //\n\nexport default main;\n"],"names":["readNDJSON","file","options","clbk","opts","done","arguments","length","isString","encoding","isObject","TypeError","format","isFunction","readFile","error","toString","removeBOM","reviver","parseNDJSON","instanceOf","Error","readNDJSONSync","f","setReadOnly","main","sync"],"mappings":";;83BA0DA,SAASA,EAAYC,EAAMC,EAASC,GACnC,IAAIC,EACAC,EACJ,GAAKC,UAAUC,OAAS,EACvBH,EAAO,CAAA,EACPC,EAAOH,MACD,CACN,GAAKM,EAAUN,GACdE,EAAO,CACNK,SAAYP,OAEP,CACN,IAAMQ,EAAUR,GACf,MAAM,IAAIS,UAAWC,EAAQ,SAAUV,IAExCE,EAAOF,CACP,CACDG,EAAOF,CACP,CACD,IAAMU,EAAYR,GACjB,MAAM,IAAIM,UAAWC,EAAQ,SAAUP,IAExCS,EAAUb,EAAMG,GAUhB,SAAiBW,EAAOd,GACvB,GAAKc,EACJ,OAAOV,EAAMU,GAEdd,EAAOA,EAAKe,WACW,SAAlBZ,EAAKK,WACTR,EAAOgB,EAAWhB,IAGlBA,EADIG,EAAKc,QACFC,EAAalB,EAAMG,EAAKc,SAExBC,EAAalB,GAErB,GAAKmB,EAAYnB,EAAMoB,OACtB,OAAOhB,EAAMJ,GAEdI,EAAM,KAAMJ,EACZ,GACF,CCtDA,SAASqB,EAAgBrB,EAAMC,GAC9B,IAAIE,EACAmB,EACJ,GAAKjB,UAAUC,OAAS,EACvB,GAAKC,EAAUN,GACdE,EAAO,CACNK,SAAYP,OAEP,CACN,IAAMQ,EAAUR,GACf,MAAM,IAAIS,UAAWC,EAAQ,SAAUV,IAExCE,EAAOF,CACP,MAEDE,EAAO,CAAA,EAGR,OADAmB,EAAIT,EAAUb,EAAMG,GACfgB,EAAYG,EAAGF,OACZE,GAERA,EAAIA,EAAEP,WACiB,SAAlBZ,EAAKK,WACTc,EAAIN,EAAWM,IAEXnB,EAAKc,QACFC,EAAaI,EAAGnB,EAAKc,SAEtBC,EAAaI,GACrB,CCxBAC,EAAAC,EAAA,OAAAC"}